#! /usr/bin/python
# Copyright 2013-2014 Galvanized Logic Inc.
# Use is governed by a BSD-style license found in the LICENSE file.

"""
The build and distribution script for the virtual universe (vu) project.

This script can either be called by:
   1) a continuous integration script from a dedicated build server, or,
   2) a developer from the command line.

Note that build commands are specified in such a way that they can be easily
copied and tested in a shell.
"""

import os           # for file system manipulation.
import shutil       # to copy files.
import shlex        # run and control shell commands
import subprocess   # run and control shell commands
import sys          # for command line arguments

def clean():
    # Remove all generated files.
    generatedOutput = ['pkg', 'bin', 'target']
    print 'Removing generated output:'
    for gdir in generatedOutput:
        if os.path.exists(gdir):
            print '    ' + gdir
            shutil.rmtree(gdir)

def buildSrc():
    # Builds all packages.
    buildMath()
    buildLoad()
    buildRender()
    buildAudio()
    buildDevice()
    buildGrid()
    buildLand()
    buildMove()
    buildForm()
    buildAi()
    buildVu()

def buildRender():
    # Build the (OpenGL) rendering component.
    subprocess.call(shlex.split('go fmt vu/render/gl/gen'))
    subprocess.call(shlex.split('go test vu/render/gl/gen'))
    subprocess.call(shlex.split('go install vu/render/gl/gen'))
    subprocess.call(shlex.split('bin/gen -p src/vu/render/gl -s src/vu/render/gl/gen/glcorearb.h-v4.3'))
    subprocess.call(shlex.split('go fmt vu/render/gl'))
    subprocess.call(shlex.split('go install vu/render/gl'))
    subprocess.call(shlex.split('go test vu/render/gl'))
    subprocess.call(shlex.split('go fmt vu/render'))
    subprocess.call(shlex.split('go test vu/render'))
    subprocess.call(shlex.split('go install vu/render'))

def buildAudio():
    # Build the OpenAL audio library bindings.
    subprocess.call(shlex.split('go fmt vu/audio/al'))
    subprocess.call(shlex.split('go install vu/audio/al'))
    subprocess.call(shlex.split('go test vu/audio/al'))
    subprocess.call(shlex.split('go fmt vu/audio'))
    subprocess.call(shlex.split('go test vu/audio'))
    subprocess.call(shlex.split('go install vu/audio'))

def buildDevice():
    # Build the native application package.
    subprocess.call(shlex.split('go install vu/device'))
    subprocess.call(shlex.split('go fmt vu/device'))

def buildMove():
    # Build the physics package.
    subprocess.call(shlex.split('go fmt vu/move'))
    subprocess.call(shlex.split('go test vu/move'))
    subprocess.call(shlex.split('go install vu/move'))

def buildLoad():
    # Build the asset loading package.
    subprocess.call(shlex.split('go fmt vu/load'))
    subprocess.call(shlex.split('go test vu/load'))
    subprocess.call(shlex.split('go install vu/load'))

def buildLand():
    # Build the random land generation package.
    subprocess.call(shlex.split('go fmt vu/land'))
    subprocess.call(shlex.split('go test vu/land'))
    subprocess.call(shlex.split('go install vu/land'))

def buildGrid():
    # Build the grid generation package.
    subprocess.call(shlex.split('go fmt vu/grid'))
    subprocess.call(shlex.split('go test vu/grid'))
    subprocess.call(shlex.split('go install vu/grid'))

def buildMath():
    # Build the linear math package.
    subprocess.call(shlex.split('go fmt vu/math/lin'))
    subprocess.call(shlex.split('go test vu/math/lin'))
    subprocess.call(shlex.split('go install vu/math/lin'))

def buildForm():
    # Build the 2D ui control package.
    subprocess.call(shlex.split('go fmt vu/form'))
    subprocess.call(shlex.split('go test vu/form'))
    subprocess.call(shlex.split('go install vu/form'))

def buildAi():
    # Build the application ai framework package.
    subprocess.call(shlex.split('go fmt vu/ai'))
    subprocess.call(shlex.split('go test vu/ai'))
    subprocess.call(shlex.split('go install vu/ai'))

def buildVu():
    # Build the 3D virtual universe engine package and examples.
    subprocess.call(shlex.split('go fmt vu'))
    subprocess.call(shlex.split('go test vu'))
    subprocess.call(shlex.split('go install vu'))
    subprocess.call(shlex.split('go fmt vu/eg'))
    subprocess.call(shlex.split('go install vu/eg'))

def usage():
    print 'Usage: build [clean] [src]'

if __name__ == "__main__":
    options = {'clean' : clean,
               'src'   : buildSrc}
    somethingBuilt = False
    for arg in sys.argv:
        if arg in options:
            print 'Performing build ' + arg
            options[arg]()
            somethingBuilt = True
    if not somethingBuilt:
        usage()

